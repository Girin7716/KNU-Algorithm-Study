#include <iostream>
using namespace std;

int N;

int counting[10][10]; // 앞의 자리수가 i인 j번째 수

int main(){
    cin >> N;

    if(N <= 10){
        cout << N << endl;
        return 0;
    }else if(N == 1022){
        cout << 9876543210 << endl;
        return 0;
    }else if(N > 1022){
        cout << -1 << endl;
        return 0;
    }

    for(int i = 0; i < 10; i++)
        counting[i][1] = 1;

    for(int ten = 2; ten<11; ten++)
        for(int i = 1; i<10; i++)
            counting[i][ten] = counting[i-1][ten-1] + counting[i-1][ten];

    long long result = 0;
    int start_ten;
    int tens = 1;
    for(int ten = 1; ten < 11; ten ++){
        for(int i = 1; i < 10; i++){
            N -= counting[i][ten];
            if( N <= 0){    
                result += i * tens;
                N+= counting[i][ten];
                start_ten = ten-1;
                ten = 11;
                break;
            }
        }
        tens *= 10;
    }
    tens /= 100;
    while(start_ten > 1){
        for(int i = 1; i < 10; i++){
            N -= counting[i][start_ten];
            if( N <= 0){    
                result += tens * i;
                N+= counting[i][start_ten];
                break;
            }
        }
        tens /= 10;
        start_ten--;
    }
    cout << result+N-1 << endl;

    return 0;
}



/*
0 ~ 9까지 감소하는 수 : 9개

10 ~ 19까지 감소하는 수 : 1
20 ~ 29까지 : 2 = 1 + 1
30 ~ 39 : 3 = 1 + 1 + 1
40 ~ 49 : 4 = 1 + 1 + 1
50 ~ 59 : 5
60 ~ 69 : 6
70 ~ 79 : 7
80 ~ 89 : 8
90 ~ 99 : 9 (90에서 9칸 만큼 갈 수 있음)

100 ~ 199 : 0
200 ~ 299 : 1 
300 ~ 399 : 1 + 2
400 ~ 499 : 1 + 2 + 3
500 ~ 599 : 1 + 2 + 3 + 4
600 ~ 699 : 1 + 2 + 3 + 4 + 5
700 ~ 799 : 1 + 2 + 3 + 4 + 5 + 6
800 ~ 899 : 1 + 2 + 3 + 4 + 5 + 6 + 7
900 ~ 999 : 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8

1000 ~ 1999 : 0
2000 ~ 2999 : 0
3000 ~ 3999 : 1
4000 ~ 4999 : 1 + (1+2)
5000 ~ 5999 : 1 + (1+2) + (1+2+3)
6000 ~ 6999 : 1 + (1+2) + (1+2+3) + (1+2+3+4)
7000 ~ 7999 : 1 + (1+2) + (1+2+3) + (1+2+3+4) + (1+2+3+4+5)
8000 ~ 8999 : 1 + (1+2) + (1+2+3) + (1+2+3+4) + (1+2+3+4+5) + (1+2+3+4+5+6)
9000 ~ 9999 : 1 + (1+2) + (1+2+3) + (1+2+3+4) + (1+2+3+4+5) + (1+2+3+4+5+6) + (1+2+3+4+5+6+7)

...
...

10000 ~ 40000 : 0
100000 ~ 500000 : 0
1000000 ~ 6000000 : 0
10000000 ~ 70000000 : 0
100000000 ~ 800000000 : 0
1000000000 ~ 9000000000 : 0
9876543210 : 1



    // for(int ten = 2; ten < 11; ten++){
    //     for(int i = 1; i < 10; i++){
    //         for(int j = ten-3; j < i; j++)
    //             counting[i][ten] += counting[j][ten-1];
    //     }
    // }

  1   1   0   0   0   0   0   0   0   0  // 1
  1   2   1   0   0   0   0   0   0   0  // 2
  1   3   3   1   0   0   0   0   0   0  // 3
  1   4   6   4   1   0   0   0   0   0  // 4
  1   5  10  10   5   1   0   0   0   0  // 5
  1   6  15  20  15   6   1   0   0   0  // 6
  1   7  21  35  35  21   7   1   0   0  // 7
  1   8  28  56  70  56  28   8   1   0  // 8
  1   9  36  84 126 126  84  36   9   1  // 9

  
 16

 10 = 10

 11 = 20
 12 = 21

 13 = 30
 14 = 31
 15 = 32


 12
 

 56
 300으로 시작할때

 2번째

 310
 320
 321


57
300으로 시작할때
3번째


*/
